import {describe, expect, test} from "bun:test";
import {defaultEmulatorOptions} from "../../src/utils/options.ts";
import {DrawSprite} from "../../src/Instructions/DrawSprite.ts";
import {parseDisplay} from "../utils/parseDisplay.ts";
import {Instruction} from "../../src/Instruction.ts";


const di = defaultEmulatorOptions();
di.display.clear();
const opcode = new DrawSprite();

test("Instruction match", () => {
    expect(opcode.matches(new Instruction(0xD0E0))).toBeTrue();
    expect(opcode.matches(new Instruction(0x0000))).toBeFalse();
});

describe("Instruction execute", () => {
    test("draw", () => {
        di.memory.setMultiple(0x100, [0xF0, 0x90, 0x90, 0x90, 0xF0]);
        di.ir.value = 0x100;
        di.vr.values[0x1] = 0x5;
        di.vr.values[0x2] = 0x5;
        di.vr.values[0xF] = 0x1; // vF flag should be 0 after instruction exec

        opcode.execute(di, new Instruction(0xD125));

        const display = `
................................................................
................................................................
................................................................
................................................................
................................................................
.....████.......................................................
.....█..█.......................................................
.....█..█.......................................................
.....█..█.......................................................
.....████.......................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
`;

        expect(di.display.state).toEqual(parseDisplay(display));
        expect(di.vr.values[0xF]).toBe(0);
    });
    test("clear sprite", () => {
        di.ir.value = 0x100;
        opcode.execute(di, new Instruction(0xD125));
        expect(di.vr.values[0xF]).toBe(1);
        expect(di.display.state.flat()).not.toContain(true);
    })
});